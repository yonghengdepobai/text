/**
 * 字符        匹配
 * [...]       方括号内的任意字符
 * [^...]      不在方括号的任意字符
 * .            除换行符和其化unicode行终止符之外的任意字符
 * \w           任何ASCII字符组成的单词， 等价于[a-zA-Z0-9]
 * \W           任何不是ASCII字符组成的单词， 等价于[^a-zA-Z0-9]
 * \s           任何Unicode空白符
 * \S           任何非Unicode空白符的字符
 * \d           数字 等价[0-9]
 * \D           除数字之外 等价[^0-9]
 * [\b]         退格直接量
 * 
 * 
 * {n, m}       匹配前一项到少n次，但不能超过m次
 * {n, }        匹配前一项到少n次，或者更多次
 * {n}          匹配前一项n次
 * ?            匹配前一项0次或者1次 {0，1}
 *  +            匹配前一项1次或者多次 {1,}
 *  *           匹配前一项0次或者多次 {0,}
 * 
 * 锚字符
 * ^            匹配字符串的开头，在多行检索中，匹配一行的开头
 * $            匹配字符串的结尾，在多行检索中，匹配一行的结尾
 * \b           匹配一个单词的边界，简言之，就是位于\w和\W之间的位置，或位于字符\w和字符串的开头或者结尾之间的位置
 * \B           匹配非单词边界的位置
 * (?=p)        零宽正向先行断言，要求接下来的字符都与p匹配，但不能包括匹配p的那些字符
 * (?!p)        零宽负向先行断言，要求接下来的字符不与p匹配
 * 
 * 修饰符
 * i            执行不区分大小写的匹配
 * g            执行一个全局匹配，即找到所有匹配
 * m            多行匹配模式，^匹配一行的开头和字符串的开头， $匹配一行的结尾和字符串的结尾
 * 
 */

 /**
  *  字符'|' 用于分隔供选择的字符 例如 /ab|cd|ef/ 可以匹配ab 也可匹配 cd
  * /\d{3}|[a-z]{4}/ 匹配三个数字或者四个小写字母
  * 从左向右匹配 匹配成功就返回
  * 
  * 圆括号有多种作用
  * 一是把单独的项组合成子表达式，以便可以像处理一个独立的单元那样用'|','*','+'等来对单元内的项进行处理
  * 例如 /java(script)?/ 可以匹配字符串'java'，其后的script也可没有
  * /(ab|cd)+|ef/ 可以匹配ef 也可以匹配ab或cd一次或多次重复
  * 
  * 另一个种用是在完整的模式中定义子模式。当一个正则表达式成功地和目标字符串相匹配时，可以从目标中抽出和圆括号中的子模式相匹配的部分
  * 
  * 另一个种用法是允许在同一正则表达式的后部引用前面的子表达式。这是通过在字符'\'后加一位或多位数字来实现的。
  * 这个数字指定了带圆括号的子表达式在正则表达式的位置 可嵌套 位置指的是左括号出现位置
  * 对子表达式的引用不是指 对子表达式的模式引用，而指的是与那个模式相匹配的文本的引用
  * /['"][^'"]*['"]/ 位于单引号或双引号之间0个或多个字符，它并不要求左侧和右侧的引号匹配
  * 如果要匹配左侧和右侧的引号
  * /(['"])[^'"]*\1/
  * 
  */

  /**
   * search() 返回与之匹配的子串的起始位置 不支持全局检索
   * 'Javascript'.search(/script/i)  // 匹配到返回4 匹配不到返回-1
   * 
   * replace() 方法用以执行检索替换操作 两个参数 第一个正则表达式 第二个要替换的字符
   *  如果第一个字符串则直接搜索这人字符串
   * 第二个参数可以是函数， 该函数能动态的计算替换字符串
   * 如果替换字符中出现了$加数字，那么replace()将用与指定的子表达式相匹配的文本来替换这两个字符
   *
   * // 将所有不区分大小的javascript 都替换在民JavaScript
   * text.replace(/javascript/gi, 'JavaScript');
   * 
   * // 一段引用文本起始于引号，结束于引号 中间的内容区域不能包含引号
   * var quote = /"([^"]*)"/g;
   * // 用中文半角引号替换英文引号，同时要保持引号之间的内容（存储在$1中） 没有被修改
   * text.replace(quote, ' "$1" ');
   * 
   * match() 唯一的参数就是正则表达式， 返回一个则匹配结果组成的数组 
   * 如果设置了修改符g，则该方法返回的数组包含字符串中的所有匹配结果
   * 如果没有设置 就返回第一个结果 也是返回数组 这种情况下a[0]是与之匹配的字符串，余下的元素则是正则表达中用括号括起来的子表达式
   * '1 plus 2 equals 3'.match(/\d+/g) // 返回 ['1', '2', '3']
   * 
   * 
   * 
   */
  var url = /(\w+):\/\/([\w.]+)\/(\S*)/;
  var text = "Vist my blog at http://www.example.com/~david";
  var result = text.match(url);
  if (result != null) {
      var fullurl = result[0]; // 包含 'http://www.example.com/~david'
      var protocol = result[1]; // 包含 'http'
      var host = result[2]; // 包含 'www.example.com'
      var path = result[3]; // 包含 '~david'
  }